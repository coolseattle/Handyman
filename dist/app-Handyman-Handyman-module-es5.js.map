{"version":3,"sources":["src/app/Handyman/Handyman-Create.component.html","src/app/Handyman/Handyman-create.component.ts","src/app/Handyman/Handyman-list-resolver.service.ts","src/app/Handyman/Handyman-list-thumpnail.component.ts","src/app/Handyman/Handyman-list.component.ts","src/app/Handyman/Handyman.module.ts","src/app/Handyman/Handyman.routes.ts"],"names":[],"mappings":"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","sourcesContent":["export default \"<div>\\r\\n  <h1>\\r\\n    <div *ngIf=\\\"addMode \\\">Add new Handyman</div>\\r\\n    <div *ngIf=\\\"!addMode\\\">Edit Handyman</div>\\r\\n  </h1>\\r\\n  <hr>\\r\\n  <div class=\\\"col-md-4\\\">\\r\\n    <form  [formGroup]=\\\"customerForm\\\" (ngSubmit)=\\\"saveCustomer(customerForm.value)\\\" autocomplete=\\\"off\\\" novalidate>\\r\\n      <div class=\\\"form-group\\\" [ngClass]=\\\"{'error' : !validateFirstName() }\\\">\\r\\n        <label for=\\\"fname\\\">First Name:</label>\\r\\n        <em *ngIf=\\\"!validateFirstName() && customerForm?.controls?.fname?.errors?.required\\\">Required</em>\\r\\n        <em *ngIf=\\\"!validateFirstName() && customerForm?.controls?.fname?.errors?.pattern\\\">Must start with a letter</em>\\r\\n        <input formControlName=\\\"fname\\\" id=\\\"fname\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"First Name...\\\" />\\r\\n      </div>\\r\\n      <div class=\\\"form-group\\\"  [ngClass]=\\\"{'error' : !validateLastName() }\\\">\\r\\n        <label for=\\\"lname\\\">Last Name:</label>\\r\\n        <em *ngIf=\\\"!validateLastName()\\\">Required</em>\\r\\n        <input formControlName=\\\"lname\\\" id=\\\"lname\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Last Name...\\\" />\\r\\n      </div>\\r\\n        \\r\\n      <div class=\\\"form-group\\\">\\r\\n        <label for=\\\"age\\\">Age:</label>\\r\\n        <em *ngIf=\\\"customerForm.controls.age.errors?.required\\\">Required</em>\\r\\n        <em *ngIf=\\\"customerForm.controls.age.errors?.pattern\\\">Age accept numeric only</em>\\r\\n        <em *ngIf=\\\"customerForm.controls.age.errors?.max || customerForm.controls.age.errors?.min\\\">Maximum is 199</em>\\r\\n        <input type=\\\"number\\\" minlength=\\\"2\\\" min = \\\"18\\\" formControlName=\\\"age\\\" id=\\\"age\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"age..\\\" />\\r\\n      </div>\\r\\n      <div class=\\\"form-group\\\">\\r\\n        <label for=\\\"phone\\\">Phone:</label>\\r\\n        <em *ngIf=\\\"customerForm.controls.phone.errors?.required\\\">Required</em>\\r\\n        <em *ngIf=\\\"customerForm.controls.phone.errors?.minlength || customerForm.controls.phone.errors?.maxlength \\\">Phone number min:9 max:15</em>\\r\\n        <em *ngIf=\\\"customerForm.controls.phone.errors?.mobNumExists\\\">Phone number already exists</em>\\r\\n        <input formControlName=\\\"phone\\\" id=\\\"phone\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Phone..\\\" />\\r\\n      </div>\\r\\n      <div class=\\\"form-group\\\">\\r\\n        <label for=\\\"PhotoImageUrl\\\">PhotoImageUrl:</label>\\r\\n        <em *ngIf=\\\"customerForm.controls.PhotoImageUrl.errors?.pattern\\\">Invalid Url</em>\\r\\n       <input formControlName=\\\"PhotoImageUrl\\\" id=\\\"PhotoImageUrl\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Photo Image...\\\" />\\r\\n      </div>\\r\\n      <div class=\\\"form-group\\\">\\r\\n        <label for=\\\"latitude\\\">latitude:</label>\\r\\n        <input formControlName=\\\"latitude\\\" id=\\\"latitude\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"latitude Image...\\\" />\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-default\\\" (click)=\\\"getGeoLocation()\\\">Fill Location</button>\\r\\n      </div>  \\r\\n      <div class=\\\"form-group\\\" >\\r\\n        <label for=\\\"longitude\\\">longitude:</label>\\r\\n        <input formControlName=\\\"longitude\\\" id=\\\"longitude\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"longitude Image...\\\" />\\r\\n      </div>  \\r\\n      <div class=\\\"form-group\\\">\\r\\n        <label for=\\\"adhaarID\\\">adhaarID:</label>\\r\\n        <input formControlName=\\\"adhaarID\\\" id=\\\"adhaarID\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"adhaarID Image...\\\" />\\r\\n      </div>  \\r\\n      <div class=\\\"form-group\\\">\\r\\n        <label for=\\\"adhaarImage\\\">adhaarImage:</label>\\r\\n          <input formControlName=\\\"adhaarImage\\\" id=\\\"adhaarImage\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"adhaarImage Image...\\\" />\\r\\n      </div>\\r\\n      <div class=\\\"form-group\\\">\\r\\n        <label for=\\\"referenceby\\\">referenceby:</label>\\r\\n        <input formControlName=\\\"referenceby\\\" id=\\\"referenceby\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"referenceby Image...\\\" />\\r\\n      </div>\\r\\n      <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Save</button>\\r\\n      <button type=\\\"button\\\" class=\\\"btn btn-default\\\" (click)=\\\"cancel()\\\">Cancel</button>\\r\\n    </form>\\r\\n  <div>\\r\\n</div>\"","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators, FormBuilder } from '@angular/forms';\r\nimport { HandymanService } from './shared/Handyman.Service';\r\nimport { IHandyMan } from './shared/Handyman.model';\r\nimport { Router, ActivatedRoute, Params} from '@angular/router';\r\nimport { TOASTR_TOKEN, Toastr } from '../common/toastr.service';\r\nimport {existingMobileNumberValidator} from '../Validators/existingMobileNumberValidator';\r\n\r\n@Component({\r\n  templateUrl: './Handyman-Create.component.html',\r\n  styles: [`\r\n    em {float:right; color:#E05C65; padding-left: 10px;}\r\n    .error input {background-color:#E3C3C5;}\r\n    .error ::-webkit-input-placeholder { color: #999; }\r\n    .error ::-moz-placeholder { color: #999; }\r\n    .error :-moz-placeholder { color:#999; }\r\n    .error :ms-input-placeholder { color: #999; }\r\n  `]\r\n})\r\nexport class HandymanCreateComponent implements OnInit {\r\n  private URLValidPattern = '^(http[s]?:\\\\/\\\\/){0,1}(www\\\\.){0,1}[a-zA-Z0-9\\\\.\\\\-]+\\\\.[a-zA-Z]{2,5}[\\\\.]{0,1}$';\r\n  customerForm: FormGroup;\r\n  addMode = false;\r\n  private customer: IHandyMan;\r\n  private fname: FormControl;\r\n  private lname: FormControl;\r\n  private  phone: FormControl;\r\n  private  age:  FormControl;\r\n  private  PhotoImageUrl: FormControl;\r\n  private  address1: FormControl;\r\n  private  address2: FormControl;\r\n  private  Landmark: FormControl ;\r\n  private  city: FormControl;\r\n  private  country: FormControl;\r\n  private  zipcode: FormControl;\r\n  private  latitude: FormControl;\r\n  private  longitude: FormControl;\r\n  private  adhaarID: FormControl;\r\n  private  adhaarImage: FormControl;\r\n  private  referenceby: FormControl;\r\n  constructor(private router: ActivatedRoute,\r\n    private customerService: HandymanService,\r\n    private rediretrouter: Router,\r\n    @Inject(TOASTR_TOKEN) private toastr: Toastr\r\n    ) {\r\n  }\r\n\r\n  ngOnInit() {\r\n      this.router.params.forEach((params: Params) => {\r\n     this.customer = this.customerService.getHandyman(+params['id']);\r\n        this.addMode = false;\r\n        if (!this.customer) {\r\n              this.addMode = false;\r\n              this.createEmptyCustomer();\r\n           }\r\n      });\r\n      console.warn( ' fname ' +  this.customer.fname);\r\n      this.InitFormControl();\r\n     }\r\n\r\n  InitFormControl() {\r\n    /*\r\n    this.fname = new FormControl ('', [Validators.required, Validators.pattern('[a-zA-Z].*')]);\r\n    this.lname = new FormControl( '', Validators.required);\r\n    this.phone = new FormControl( '', [Validators.required, Validators.minLength(9), Validators.maxLength(15)]);\r\n    this.PhotoImageUrl = new FormControl( '');\r\n    this.age  = new FormControl('',\r\n          [Validators.required, Validators.min(17) ,  Validators.max(199), Validators.pattern('^[0-9]*$')]);\r\n    this.latitude  = new FormControl('');\r\n    this.longitude  = new FormControl( '');\r\n    this.adhaarID  = new FormControl('');\r\n    this.adhaarImage  = new FormControl('');\r\n    this.referenceby  = new FormControl(''); \r\n    */\r\n    \r\n    this.fname = new FormControl (this.customer.fname, [Validators.required, Validators.pattern('[a-zA-Z].*')]);\r\n    this.lname = new FormControl( this.customer.lname, Validators.required);\r\n    this.phone = new FormControl( this.customer.phone, \r\n       {validators: [Validators.required, Validators.minLength(9), Validators.maxLength(15)],\r\n        asyncValidators: [existingMobileNumberValidator(this.customerService, this.customer.phone, this.addMode)], updateOn: 'blur'});\r\n    this.PhotoImageUrl = new FormControl( this.customer.PhotoImageUrl, Validators.pattern[this.URLValidPattern]);\r\n    this.age  = new FormControl(this.customer.age,\r\n        [Validators.required, Validators.min(17) ,  Validators.max(199), Validators.pattern('^[0-9]*$')]);\r\n    this.latitude  = new FormControl(this.customer.latitude);\r\n    this.longitude  = new FormControl( this.customer.longitude);\r\n    this.adhaarID  = new FormControl(this.customer.adhaarID);\r\n    this.adhaarImage  = new FormControl( this.customer.adhaarImage);\r\n    this.referenceby  = new FormControl(this.customer.referenceby);\r\n\r\n    this.customerForm = new FormGroup({\r\n       fname :  this.fname,\r\n       lname :  this.lname,\r\n       phone : this.phone,\r\n       PhotoImageUrl: this.PhotoImageUrl,\r\n        age: this.age,\r\n        latitude:  this.latitude,\r\n        longitude: this.longitude,\r\n        adhaarID :   this.adhaarID,\r\n        adhaarImage :  this.adhaarImage,\r\n        referenceby :   this.referenceby\r\n    }); \r\n  }\r\n\r\n  validateImageurl(val : any){\r\n    console.warn( \"Photo Image url changed.\");\r\n  }\r\n  createEmptyCustomer() {\r\n          this.customer = {\r\n            id: Math.floor((Math.random() * 100) + 1),\r\n            fname: '',\r\n            lname: '',\r\n            PhotoImageUrl: '',\r\n            age: 0,\r\n            enrolledDate: new Date('9/26/2018'),\r\n            yearsofExperience: 10,\r\n            phone: '',\r\n            location: {\r\n              address1: 'T',\r\n              address2:'',\r\n              Landmark:'',\r\n              city: '',\r\n              country: '',\r\n              zipcode: '' \r\n            },\r\n            latitude: '',\r\n            longitude : '',\r\n            adhaarID: '',\r\n            adhaarImage: '',\r\n            InsuranceImage: '',\r\n            InsuranceProvider: '',\r\n            InsuranceID: '',\r\n            DrivingLicense: '',\r\n            DrivingLicenseImage: '',\r\n            referenceby: '',\r\n            referencebyID: 0,\r\n            ratingaverage: 0,\r\n            serviceType: ''\r\n        }; \r\n   } // Create empty customer\r\n\r\n  saveCustomer(formValues) {\r\n    if (!this.customerForm.valid) {\r\n        return;\r\n      }\r\n    \r\n    if (this.customer === undefined) {\r\n        this.createEmptyCustomer();\r\n     }\r\n      this.customer.id = Math.floor((Math.random() * 100) + 1);\r\n      this.customer.fname =  formValues.fname;\r\n      this.customer.lname = formValues.lname;\r\n      this.customer.PhotoImageUrl = formValues.PhotoImageUrl;\r\n      this.customer.age = formValues.age;\r\n      this.customer.phone = formValues.phone;\r\n          this.customer.location.address1 = '1057 DT';\r\n          this.customer.location.address2 = 'address2';\r\n          this.customer.location.Landmark = 'Next to NY tower';\r\n          this.customer.location.city = 'London';\r\n          this.customer.location.country = 'England';\r\n          this.customer.location.zipcode = '623707';\r\n      this.customer.latitude = formValues.latitude;\r\n      this.customer.longitude = formValues.longitude;\r\n      this.customer.referenceby =  formValues.referenceby;\r\n      this.customer.adhaarID = formValues.adhaarID;\r\n      this.customer.adhaarImage = formValues.adhaarImage; \r\n     \r\n      //this.customer = Object.assign({}, this.customerForm.value);\r\n      console.warn(' Cusotmer ID  :' + this.customer.id)\r\n      this.customerService.saveHandyman(this.customer);\r\n      this.toastr.success('Profile Saved');\r\n  }\r\n\r\n  validateFirstName() {\r\n    return this.fname.valid || this.fname.untouched;\r\n  }\r\n  validateLastName() {\r\n    return this.lname.valid || this.lname.untouched;\r\n  }\r\n  cancel() {\r\n    this.rediretrouter.navigate(['customer\\list']);\r\n  }\r\n  getGeoLocation() {\r\n     if (navigator.geolocation) {\r\n          const options = {timeout:60000};\r\n          navigator.geolocation.getCurrentPosition(this.fillPosition, this.errorHandler, options);\r\n        } else { \r\n          console.error('Geo Location not supported by this browser');\r\n        }\r\n  }\r\n\r\n errorHandler(err) {\r\n    if (err.code === 1) {\r\n       console.error('Access denied');\r\n    } else if ( err.code === 2) {\r\n       console.error('Error: Position is unavailable!');\r\n    }\r\n }\r\n\r\n fillPosition(position) {\r\n      this.longitude.setValue( position.coords.longitude);\r\n      this.latitude.setValue( position.coords.latitude);\r\n  }\r\n\r\n  \r\n}\r\n","import { Injectable } from '@angular/core';\nimport { Resolve } from '@angular/router';\nimport { HandymanService } from '../Handyman/shared/Handyman.Service';\nimport { Observable } from 'rxjs';\n\n\n@Injectable()\nexport class HandymanListResolver implements Resolve<any> {\n  constructor(private handymanService: HandymanService) {\n  }\n  resolve() : Observable<any> {\n    return this.handymanService.getHandymen();\n  }\n}\n","import { Component, Input } from '@angular/core';\r\nimport { IHandyMan } from '../Handyman/shared/Handyman.model';\r\nimport {NgbRating} from '@ng-bootstrap/ng-bootstrap';\r\n\r\n@Component({\r\n  selector: `Handyman-thumbnail`,\r\n  template: `\r\n  <div [routerLink]=\"['/handyman/edit', Handyman.id]\" class=\"card well hoverwell thumbnail\" style=\"max-width: 15rem; max-height:25rem;\">\r\n    <img style=\"width:14rem; height:24rem;\" class=\"card-img-top Thumbnail rounded\" src=\"{{Handyman?.PhotoImageUrl}}\" alt=\"Handyman image\" >\r\n    <div class=\"card-body\"> <!-- card-img-overlay -->\r\n      <h4 class=\"card-title\">{{Handyman?.fname}} {{Handyman?.lname}} </h4>\r\n      <div class=\"card-text\">\r\n        Phone: {{Handyman?.phone}} <BR>\r\n        <div *ngIf=\"Handyman?.location\">\r\n          <span>Location: {{Handyman?.location?.Address1}}</span>\r\n          <span class=\"pad-left\">{{Handyman?.location?.city}}, {{Handyman?.location?.zipcode}}</span>\r\n        </div>\r\n      </div>\r\n      <ngb-rating rate=\"{{Handyman?.ratingaverage}}\" max=\"5\" [readonly]=\"true\" >\r\n         <ng-template let-fill=\"fill\" let-index=\"index\">\r\n             <span class=\"star\" [class.filled]=\"fill === 100\" [class.bad]=\"index < 3\">&#9733;</span>\r\n        </ng-template>\r\n      </ngb-rating>\r\n      <!-- a  [routerLink]=\"['/handyman/edit', Handyman.id]\" class=\"btn btn-primary\">See Profile</a -->\r\n    </div>\r\n  </div>\r\n  <div>&nbsp;</div>\r\n  `,\r\n  styles: [`\r\n    .thumbnail { min-height: 210px; }\r\n    .pad-left { margin-left: 10px; }\r\n    .well div { color: #bbb; }\r\n    .star {\r\n      font-size: 1.5rem;\r\n      color: #b0c4de;\r\n    }\r\n    .filled {\r\n      color: #1e90ff;\r\n    }\r\n    .bad {\r\n      color: #deb0b0;\r\n    }\r\n    .filled.bad {\r\n      color: #ff1e1e;\r\n    }\r\n    ` ]\r\n})\r\nexport class HandymanThumbnailComponent {\r\n  @Input() Handyman: IHandyMan;\r\n}\r\n","import { Component, OnInit } from '@angular/core';\nimport { HandymanService } from  '../Handyman/shared/Handyman.Service';\nimport { ActivatedRoute } from '@angular/router';\nimport { IHandyMan } from '../Handyman/shared/Handyman.model';\n\n@Component({\n  template: `\n    <div>\n        <h1>Top Handymen</h1>\n        <hr/>\n        <div class=\"row\">\n        <div *ngFor=\"let handyman of Handymen\" class=\"col-md-3\">\n            <div class=\"card-deck\">\n                <Handyman-thumbnail [Handyman]=\"handyman\"></Handyman-thumbnail>\n             </div>\n        </div>\n        </div>\n    </div>\n    `\n})\n\nexport class HandymanListComponent implements OnInit {\n  Handymen: IHandyMan[];\n  constructor(private handymanService: HandymanService, private route: ActivatedRoute) {\n  }\n\n  ngOnInit() {\n   this.Handymen =  this.route.snapshot.data['Handymen'];\n  }\n\n\n}\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule,  ActivatedRouteSnapshot } from '@angular/router';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { HandymanRoutes } from './Handyman.routes';\r\nimport { HandymanListComponent } from './Handyman-list.component';\r\nimport { HandymanService } from './shared';\r\nimport { HandymanListResolver } from './Handyman-list-resolver.service';\r\nimport { HandymanThumbnailComponent } from './Handyman-list-thumpnail.component';\r\nimport { HandymanCreateComponent } from './Handyman-create.component';\r\nimport {NgbModule} from '@ng-bootstrap/ng-bootstrap';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    RouterModule.forChild(HandymanRoutes),\r\n    NgbModule\r\n  ],\r\n  declarations: [\r\n    HandymanListComponent,\r\n    HandymanThumbnailComponent,\r\n    HandymanCreateComponent\r\n    \r\n  ],\r\n  providers: [\r\n    HandymanService,\r\n    HandymanListResolver\r\n  ]\r\n})\r\nexport class HandymanModule { }\r\n","import { HandymanListComponent } from './Handyman-list.component';\nimport { HandymanListResolver } from './Handyman-list-resolver.service';\nimport {HandymanCreateComponent } from './Handyman-create.component';\nimport { AdminGuardService } from './../router.guard.service/index';\n\nexport const HandymanRoutes = [\n  { \n    path: 'list', component: HandymanListComponent, resolve: {Handymen: HandymanListResolver}\n  },\n  { \n    path: 'edit/:id', \n    component: HandymanCreateComponent,\n    canActivate: [AdminGuardService]\n  }\n];\n"],"sourceRoot":"webpack:///"}